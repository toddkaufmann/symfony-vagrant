# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
# from
# vagrant up ubuntu/trusty64 --provider virtualbox

#  config.vm.box = "deb7.6"
#  fails:  "No guest additions were detected on the base box for this VM!"

# works
# config.vm.box = "ubuntu/trusty64"

config.vm.box = "precise32"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

# web - internally on port 80, but outside known as 8633
config.vm.network "forwarded_port", guest: 80, host: 8633
# maria -- for access from outside (convenience, not required)
config.vm.network "forwarded_port", guest: 3306, host: 13306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
# ?? mine is 10.0.2.15 -- but is this random?  probably better to fix for app_dev access, link sharing etc.

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
config.vm.synced_folder "../", "/trunk"
# or mount under user dir?
# another for db sql data imports?  

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
# set above if you want to see bios & boot messages.  
# also gives a login prompt, and perhaps more diagnostics for failures.
# Note you can also just start the VM from vbox gui to achieve same, 
#  so only set above if you want to see it every time.
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

# we'll start small, but may need more with a bigger db?
config.vm.provider "virtualbox" do |vb|
  vb.memory = "1280"
end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL

#  config.vm.provision "shell", inline: <<-SHELL

  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
config.vm.provision "shell", inline: <<-SHELL

# TODO:  split this into two scripts, one for root (packages, system config) and another for user.

# If not set, default version (mariadb 5.4) will get installed.
DB=maria_10
DB=maria_5

if [ "$DB" == "maria_10" ]; then
    # first PPA for maria 10
    sudo apt-get install software-properties-common
    sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
    sudo add-apt-repository 'deb http://ftp.kaist.ac.kr/mariadb/repo/10.0/ubuntu trusty main'
fi

sudo apt-get update

INSTALL_DB==No

if [ "INSTALL_DB" == "Yes" ]; then

    if [ "$DB" == "maria_10" ]; then
        # prevent prompt for password
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mariadb-server-10.0     
    else 
        # default mysql
        # TODO set pw with debconf; see
        # DEBIAN_FRONTEND=noninteractive  apt-get install -y  mariadb-server  
        sudo DEBIAN_FRONTEND=noninteractive  apt-get install -y  mariadb-server  
    fi

    echo 
    echo ================================= TODO:  set password
    echo 
    sleep 5
else
    echo ================================= No database in this server.......
fi


# Unnecessary services
sudo service puppet stop
sudo service chef-client stop
echo manual | sudo tee -a /etc/init/chef-client.override
# echo manual | sudo tee -a /etc/init/puppet.override
# puppet does not listen
update-rc.d -f puppet remove


sudo apt-get install -y  libapache2-mod-php5 
# libapache2-mod-php5 includes apache2 and php5-cli
# ? php5-dev 

if [ "INSTALL_DB" == "Yes" ]; then
    # pdo driver
    sudo apt-get install -y  php5-mysql
    # php5-dbg has this, also sqlite,odbc,pgsql
fi

# Can't install symfony without curl
if [ `whereis curl` == 'curl:' ]; then 
    sudo apt-get install -y curl  
fi

# symfony requirements (composer, actually)
sudo apt-get install -y php5-curl


# Install Symfony
# see symfony book
# (only needed to create project?  app/console for everything else ?)
sudo curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
sudo chmod a+x /usr/local/bin/symfony

# 
# Put other packages here.
# (markdown support apparently included in ubuntu, but was separate for OS X.)
#

# Other scripts to run:
# run-parts /vagrant./...
#  ideally make your scripts idempotent
#    (eg touch a file to indicate step has been done)
#


#############
############# Application configuration
#############
#  db -- set root password


if [ "INSTALL_DB" == "Yes" ]; then
    echo Creating symtest database
    echo 'CREATE DATABASE  `symtest` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;' | mysql -u root

    #  ?? load any data ??
    # this fixes a table with many longtexts on a row that I couldn't load.. 
    (echo 'SET GLOBAL innodb_file_format=Barracuda;'; \
     echo 'SET GLOBAL innodb_file_per_table=ON; '; \
     echo '-- ALTER TABLE `Candidates` ROW_FORMAT=COMPRESSED; -- maybe above default is enough?') \
     | mysql -u root symtest
fi


# PHP config -- 
# .ini settings
sudo tee /etc/php5/cli/conf.d/01-symtest-timezone.ini <<TIMZONE
[Date]
; Defines the default timezone used by the date functions
; http://php.net/date.timezone
date.timezone = America/New_York

TIMZONE
# for apache as well
# note on debian the two conf.d's are symlink'd so this would already exist
if [ ! -e /etc/php5/apache2/conf.d/01-symtest-timezone.ini ]; then
  sudo ln /etc/php5/cli/conf.d/01-symtest-timezone.ini \
         /etc/php5/apache2/conf.d/01-symtest-timezone.ini
fi


#
# apache config
#
sudo /vagrant/vm-config/configure-apache

# Separate Symtest user for app ?
# sudo useradd --shell /bin/bash  --create-home  symtest
# sudo su -c /vagrant/vm-config/configure-app symtest
# We'll just use current user (vagrant)


# for some reason HOME is not set?  but sudo sets it ...
sudo su -c /vagrant/vm-config/configure-app   vagrant

cd symtest
sudo chown -R vagrant.www-data app/logs app/cache
sudo chmod -R go+w             app/logs app/cache/

# TODO: remount fs with ACL support instead
# http://blog.dsyph3r.com/2011/09/symfony2-using-setfacl-for-cache-and.html

#                        .. if you really must log in to the vm

(echo "export HISTTIMEFORMAT='%F %T '"; \
 echo "# try to avoid web/console cache permissions problem"; \
 echo "umask 002") >> /home/vagrant/.bashrc
echo '#' `date` ' - vagrant instance provision date.' >> /home/vagrant/.bashrc

############# 
## user-specific environ
echo
echo "user-specific environ" >&2
echo 

# debug:  check vagrant env 
set > /vagrant/up-`date +%Y%m%d.%H%M`.env
# TODO:
# - log other useful vm stats?  (startup time, kernel etc)

#############

SHELL

end
